{"ast":null,"code":"import { incrementX, incrementO, incrementRound, resetGame } from '../score.actions';\nimport { getPlayerX } from '../index';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../square/square.component\";\n\nfunction BoardComponent_button_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Congratulations! Player \", ctx_r0.winner, \" has won the game! Please start a new game OR reset the game!\");\n  }\n}\n\nfunction BoardComponent_app_square_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-square\", 9);\n    i0.ɵɵlistener(\"click\", function BoardComponent_app_square_22_Template_app_square_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.makeMove(i_r3);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const val_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", val_r2);\n  }\n}\n\nexport class BoardComponent {\n  constructor(store) {\n    this.store = store;\n    this.scoreX$ = store.select(getPlayerX);\n    this.scoreO$ = store.select('score');\n    this.round$ = store.select('score');\n  }\n\n  ngOnInit() {\n    this.newGame();\n  }\n\n  newGame() {\n    this.squares = Array(9).fill(null);\n    this.winner = null;\n    this.xIsNext = true;\n    this.isGameOver = false;\n    this.incrementRound();\n  }\n\n  incrementX() {\n    this.store.dispatch(incrementX());\n  }\n\n  incrementO() {\n    this.store.dispatch(incrementO());\n  }\n\n  incrementRound() {\n    this.store.dispatch(incrementRound());\n  }\n\n  resetGame() {\n    this.store.dispatch(resetGame());\n    this.newGame();\n  }\n\n  get player() {\n    return this.xIsNext ? 'X' : 'O';\n  }\n\n  makeMove(idx) {\n    if (!this.isGameOver) {\n      if (!this.squares[idx]) {\n        this.squares.splice(idx, 1, this.player);\n        this.xIsNext = !this.xIsNext;\n      }\n\n      this.winner = this.calculateWinner();\n    }\n  }\n\n  calculateWinner() {\n    // combinations of wins\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (this.squares[a] && this.squares[a] === this.squares[b] && this.squares[a] === this.squares[c]) {\n        this.isGameOver = true;\n\n        if (this.squares[a] == 'X') {\n          this.incrementX();\n        } else {\n          this.incrementO();\n        }\n\n        return this.squares[a];\n      }\n    }\n\n    return null;\n  }\n\n}\n\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\n\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"app-board\"]],\n  decls: 24,\n  vars: 12,\n  consts: [[1, \"min-h-screen\", \"bg-purple-200\", \"bg-opacity-25\"], [1, \"text-center\", \"m-2\"], [1, \"flex\", \"justify-center\"], [1, \"m-2\"], [1, \"font-sans\", \"shadow-2xl\", \"m-4\", \"w-42\", \"py-3\", \"px-6\", \"text-white\", \"rounded-lg\", \"bg-purple-600\", \"hover:bg-purple-700\", \"shadow-lg\", \"block\", \"md:inline-block\", 3, \"click\"], [\"class\", \"font-sans shadow-2xl m-1 w-42 py-3 px-6 text-white rounded-lg bg-red-500 bg-opacity-75 shadow-lg block md:inline-block\", 4, \"ngIf\"], [1, \"justify-center\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"font-sans\", \"shadow-2xl\", \"m-1\", \"w-42\", \"py-3\", \"px-6\", \"text-white\", \"rounded-lg\", \"bg-red-500\", \"bg-opacity-75\", \"shadow-lg\", \"block\", \"md:inline-block\"], [3, \"value\", \"click\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"br\");\n      i0.ɵɵelementStart(2, \"h1\", 1);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2);\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtext(6);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 3);\n      i0.ɵɵtext(9);\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 3);\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 2);\n      i0.ɵɵelementStart(15, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function BoardComponent_Template_button_click_15_listener() {\n        return ctx.newGame();\n      });\n      i0.ɵɵtext(16, \"Start A New Game\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function BoardComponent_Template_button_click_17_listener() {\n        return ctx.resetGame();\n      });\n      i0.ɵɵtext(18, \"Reset The Game\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 2);\n      i0.ɵɵtemplate(20, BoardComponent_button_20_Template, 2, 1, \"button\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"main\", 6);\n      i0.ɵɵtemplate(22, BoardComponent_app_square_22_Template, 1, 1, \"app-square\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"br\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"Current Player: \", ctx.player, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"Player X Score: \", i0.ɵɵpipeBind1(7, 6, ctx.scoreX$).playerX, \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"Player O Score: \", i0.ɵɵpipeBind1(10, 8, ctx.scoreO$).playerO, \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"Round Number: \", i0.ɵɵpipeBind1(13, 10, ctx.round$).round, \"\");\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGameOver);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.squares);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf, i3.SquareComponent],\n  pipes: [i2.AsyncPipe],\n  styles: [\"main[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 12rem 12rem 12rem;\\n  grid-gap: 10px;\\n  margin-top: 20px;\\n}\\n\\napp-square[_ngcontent-%COMP%] {\\n  border: 1px gray solid;\\n  height: 12rem;\\n  display: flex;\\n  justify-content: center;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLHdDQUFBO0VBQ0EsY0FBQTtFQUNBLGdCQUFBO0FBQ0o7O0FBRUE7RUFDSSxzQkFBQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxrQkFBQTtBQUNKIiwiZmlsZSI6ImJvYXJkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWFpbiB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEycmVtIDEycmVtIDEycmVtO1xuICAgIGdyaWQtZ2FwOiAxMHB4O1xuICAgIG1hcmdpbi10b3A6IDIwcHg7XG59XG4gIFxuYXBwLXNxdWFyZSB7XG4gICAgYm9yZGVyOiAxcHggZ3JheSBzb2xpZDtcbiAgICBoZWlnaHQ6IDEycmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufSJdfQ== */\"]\n});","map":{"version":3,"sources":["/Users/meganyee/Desktop/projects/tic-tac-toe/src/app/board/board.component.ts","/Users/meganyee/Desktop/projects/tic-tac-toe/src/app/board/board.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { incrementX, incrementO, incrementRound, resetGame } from '../score.actions';\nimport { GameState, getPlayerX, getPlayerO, getRound } from '../index';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})\nexport class BoardComponent implements OnInit {\n  squares: string[];\n  xIsNext: boolean;\n  winner: string;\n  isGameOver: boolean;\n  scoreX$: Observable<number>;\n  scoreO$: Observable<GameState>;\n  round$: Observable<GameState>;\n\n  constructor(private store: Store<{ score }>) { \n    this.scoreX$ = store.select(getPlayerX);\n    this.scoreO$ = store.select('score');\n    this.round$ = store.select('score');\n  }\n\n  ngOnInit() {\n    this.newGame();\n  }\n\n  newGame() {\n    this.squares = Array(9).fill(null);\n    this.winner = null;\n    this.xIsNext = true;\n    this.isGameOver = false;\n    this.incrementRound();\n  }\n\n  incrementX() {\n    this.store.dispatch(incrementX());\n  }\n\n  incrementO() {\n    this.store.dispatch(incrementO());\n  }\n\n  incrementRound() {\n    this.store.dispatch(incrementRound());\n  }\n\n  resetGame() {\n    this.store.dispatch(resetGame());\n    this.newGame();\n  }\n\n  get player() {\n    return this.xIsNext ? 'X' : 'O';\n  }\n\n  makeMove(idx: number) {\n    if (!this.isGameOver) {\n      if (!this.squares[idx]) {\n        this.squares.splice(idx, 1, this.player);\n        this.xIsNext = !this.xIsNext;\n      }\n  \n      this.winner = this.calculateWinner();\n    } \n  }\n\n  calculateWinner() {\n\n    // combinations of wins\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        this.squares[a] &&\n        this.squares[a] === this.squares[b] &&\n        this.squares[a] === this.squares[c]\n      ) {\n        this.isGameOver = true;\n\n        if (this.squares[a] == 'X') {\n          this.incrementX();\n        } else {\n          this.incrementO();\n        }\n\n        return this.squares[a];\n      }\n    }\n    return null;\n  }\n}\n","<div class=\"min-h-screen bg-purple-200 bg-opacity-25\">\n    <br />\n    <h1 class=\"text-center m-2\">Current Player: {{ player }} </h1>\n    <div class=\"flex justify-center\">\n        <!-- <ng-container *ngIf=\"scoreX$ | async as score\"><div class=\"m-2\">Player X Score: {{score.playerX}}</div></ng-container> -->\n        <div class=\"m-2\">Player X Score: {{(scoreX$ | async ).playerX}}</div>\n        <div class=\"m-2\">Player O Score: {{( scoreO$ | async ).playerO}}</div>\n        <div class=\"m-2\">Round Number: {{( round$ | async ).round}}</div>\n    </div>\n    <div class=\"flex justify-center\">\n        <button class=\"font-sans shadow-2xl m-4 w-42 py-3 px-6 text-white rounded-lg bg-purple-600 hover:bg-purple-700 shadow-lg block md:inline-block\" (click)=\"newGame()\">Start A New Game</button>\n        <button class=\"font-sans shadow-2xl m-4 w-42 py-3 px-6 text-white rounded-lg bg-purple-600 hover:bg-purple-700 shadow-lg block md:inline-block\" (click)=\"resetGame()\">Reset The Game</button>\n    </div>\n    <div class=\"flex justify-center\">\n        <button *ngIf=\"isGameOver\" class=\"font-sans shadow-2xl m-1 w-42 py-3 px-6 text-white rounded-lg bg-red-500 bg-opacity-75 shadow-lg block md:inline-block\">Congratulations! Player {{ winner }} has won the game! Please start a new game OR reset the game!</button>\n    </div>\n    \n    <main class=\"justify-center\">\n        <app-square \n            *ngFor=\"let val of squares; let i = index\" \n            [value]=\"val\"\n            (click)=\"makeMove(i)\"> \n        </app-square>\n    </main>\n    <br />\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}